[gd_scene load_steps=24 format=2]

[ext_resource path="res://assets/bg_layers/Layer_0006_4.png" type="Texture" id=1]
[ext_resource path="res://Game.gd" type="Script" id=2]
[ext_resource path="res://GameUI.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/bg_layers/Layer_0005_5.png" type="Texture" id=4]
[ext_resource path="res://assets/bg_layers/Layer_0004_Lights.png" type="Texture" id=5]
[ext_resource path="res://assets/bg_layers/Layer_0003_6.png" type="Texture" id=6]
[ext_resource path="res://addons/gift/gift_node.gd" type="Script" id=7]
[ext_resource path="res://assets/bg_layers/Layer_0002_7.png" type="Texture" id=8]
[ext_resource path="res://assets/bg_layers/Layer_0009_2.png" type="Texture" id=9]
[ext_resource path="res://assets/bg_layers/Layer_0010_1.png" type="Texture" id=10]
[ext_resource path="res://assets/fonts/pxlxxlcond.ttf" type="DynamicFontData" id=11]
[ext_resource path="res://assets/fx/vignette.png" type="Texture" id=12]
[ext_resource path="res://assets/bg_layers/Layer_0008_3.png" type="Texture" id=13]
[ext_resource path="res://assets/bg_layers/Layer_0007_Lights.png" type="Texture" id=14]
[ext_resource path="res://DebugOverlay.tscn" type="PackedScene" id=15]
[ext_resource path="res://assets/bg_layers/Layer_0001_8.png" type="Texture" id=16]

[sub_resource type="Shader" id=8]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 8 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.492
shader_param/cutoff = 0.052
shader_param/falloff = 0.478
shader_param/edge_fade = 0.356
shader_param/speed = 2.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 0.611765, 0.541176, 0.341176, 0.580392 )
shader_param/hdr = true
shader_param/seed = 5.0

[sub_resource type="DynamicFont" id=7]
size = 22
font_data = ExtResource( 11 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 519.355, 10 )

[sub_resource type="Environment" id=9]
background_mode = 4
fog_color = Color( 0, 0, 0, 1 )
fog_depth_curve = 0.258816
tonemap_mode = 2
glow_intensity = 1.35
glow_blend_mode = 1
adjustment_enabled = true
adjustment_contrast = 0.94
adjustment_saturation = 1.18

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=11]
resource_name = "shake"
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 5, 0 ), Vector2( 5, 5 ), Vector2( 5, -5 ), Vector2( -5, -5 ), Vector2( -5, 5 ), Vector2( 0, 5 ), Vector2( 0, -5 ), Vector2( 5, -5 ), Vector2( 5, 5 ), Vector2( 0, 0 ) ]
}

[node name="Game" type="Node2D"]
script = ExtResource( 2 )

[node name="Background" type="Node2D" parent="."]
position = Vector2( 0, 7.29601 )

[node name="Sprite" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 10 )

[node name="Sprite2" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 9 )

[node name="Sprite3" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 13 )

[node name="Sprite4" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 14 )

[node name="Sprite5" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 1 )

[node name="Sprite6" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 4 )

[node name="Sprite7Lights" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 5 )

[node name="Rays" type="ColorRect" parent="Background"]
material = SubResource( 6 )
margin_left = 419.447
margin_top = -61.2455
margin_right = 850.447
margin_bottom = 177.755
rect_scale = Vector2( -1, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Sprite8" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 6 )

[node name="Sprite9" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 8 )

[node name="Sprite10" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 16 )

[node name="Sprite11" type="Sprite" parent="Background"]
position = Vector2( 224.286, -21.6475 )
scale = Vector2( 0.7, 0.7 )
texture = ExtResource( 16 )

[node name="Streamlings" type="Node2D" parent="."]

[node name="Vignette" type="Sprite" parent="."]
position = Vector2( -4.40973, -4.40973 )
scale = Vector2( 1.46687, 1.24345 )
texture = ExtResource( 12 )
centered = false

[node name="Label" type="Label" parent="."]
visible = false
margin_left = 6.0
margin_top = 220.0
margin_right = 69.0
margin_bottom = 237.0
custom_fonts/font = SubResource( 7 )
text = "STREAMLINGS"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Ground" type="Area2D" parent="."]
position = Vector2( 224, 280 )
collision_layer = 8
collision_mask = 6

[node name="CollisionShape2D" type="CollisionShape2D" parent="Ground"]
shape = SubResource( 5 )

[node name="GameUI" parent="." instance=ExtResource( 3 )]

[node name="DebugOverlay" parent="." instance=ExtResource( 15 )]
visible = false

[node name="Splash" type="ColorRect" parent="."]
visible = false
margin_right = 432.0
margin_bottom = 241.0
color = Color( 0.0901961, 0.0901961, 0.0901961, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Gift" type="Node" parent="."]
script = ExtResource( 7 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 9 )

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
current = true
smoothing_enabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="Camera2D"]
playback_speed = 4.0
anims/RESET = SubResource( 10 )
anims/shake = SubResource( 11 )

[connection signal="body_entered" from="Ground" to="." method="_on_Ground_body_entered"]
[connection signal="reset_level" from="GameUI" to="." method="_on_GameUI_reset_level"]
