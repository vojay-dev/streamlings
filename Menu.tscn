[gd_scene load_steps=17 format=2]

[ext_resource path="res://assets/logo.png" type="Texture" id=1]
[ext_resource path="res://Streamling.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/music/CHIPTUNE_Minstrel_Dance.mp3" type="AudioStream" id=3]
[ext_resource path="res://Menu.gd" type="Script" id=4]
[ext_resource path="res://assets/ornate-theme/ornate-theme.tres" type="Theme" id=5]
[ext_resource path="res://assets/ui/twitch.png" type="Texture" id=6]
[ext_resource path="res://assets/ui/icons/larger.png" type="Texture" id=7]
[ext_resource path="res://assets/ui/icons/smaller.png" type="Texture" id=8]
[ext_resource path="res://assets/misc/background.png" type="Texture" id=9]
[ext_resource path="res://assets/ui/icons/musicOn.png" type="Texture" id=10]
[ext_resource path="res://Highscores.tscn" type="PackedScene" id=11]

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 2 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.492
shader_param/cutoff = 0.052
shader_param/falloff = 0.478
shader_param/edge_fade = 0.356
shader_param/speed = 2.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 0.611765, 0.541176, 0.341176, 0.580392 )
shader_param/hdr = true
shader_param/seed = 5.0

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 211.208, 66.7105 ) ]
}

[sub_resource type="Animation" id=5]
resource_name = "move"
length = 6.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1, 6 ),
"transitions": PoolRealArray( 1, 1.46409, 1, 1 ),
"update": 0,
"values": [ Vector2( 211.208, 66.7105 ), Vector2( 211.208, 68.71 ), Vector2( 211.208, 66.7105 ), Vector2( 211.208, 66.7105 ) ]
}

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 216, 5 )

[node name="Menu" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 5 )
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="background" type="Sprite" parent="."]
modulate = Color( 0.168627, 0.168627, 0.168627, 1 )
position = Vector2( 216, 56 )
scale = Vector2( 0.473046, 0.473045 )
z_index = -2
texture = ExtResource( 9 )

[node name="Flash" type="ColorRect" parent="."]
modulate = Color( 1, 1, 1, 0 )
margin_right = 432.0
margin_bottom = 240.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="Flash"]

[node name="Rays" type="ColorRect" parent="."]
material = SubResource( 6 )
margin_left = 434.312
margin_top = -59.4617
margin_right = 865.312
margin_bottom = 179.539
rect_scale = Vector2( -1, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LogoBackground" type="ColorRect" parent="."]
margin_left = 118.0
margin_top = 18.0
margin_right = 315.0
margin_bottom = 80.0
color = Color( 0, 0, 0, 0.705882 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Logo" type="Sprite" parent="."]
position = Vector2( 0, -72 )
texture = ExtResource( 1 )
centered = false

[node name="Tween" type="Tween" parent="Logo"]

[node name="Panel" type="Panel" parent="Logo"]
modulate = Color( 0.576471, 0.576471, 0.576471, 1 )
margin_left = 112.0
margin_top = 87.0
margin_right = 320.0
margin_bottom = 154.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ChannelNameBackground" type="ColorRect" parent="."]
margin_left = 219.0
margin_top = 122.0
margin_right = 319.0
margin_bottom = 149.0
color = Color( 0, 0, 0, 0.705882 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CenterContainer" type="CenterContainer" parent="."]
margin_left = 0.618713
margin_top = 16.4419
margin_right = 432.619
margin_bottom = 256.442
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GridContainer" type="GridContainer" parent="CenterContainer"]
margin_left = 113.0
margin_top = 106.0
margin_right = 318.0
margin_bottom = 133.0
columns = 3

[node name="ChannelLabel" type="Label" parent="CenterContainer/GridContainer"]
margin_top = 3.0
margin_right = 101.0
margin_bottom = 24.0
text = "TWITCH CHANNEL:"

[node name="ChannelInput" type="LineEdit" parent="CenterContainer/GridContainer"]
margin_left = 105.0
margin_right = 205.0
margin_bottom = 27.0
rect_min_size = Vector2( 100, 0 )
hint_tooltip = "Channel to play with"
placeholder_text = "vojay"

[node name="CenterContainer2" type="CenterContainer" parent="."]
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = 32.0
margin_bottom = 67.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GridContainer" type="GridContainer" parent="CenterContainer2"]
margin_left = 109.0
margin_right = 323.0
margin_bottom = 35.0
custom_constants/hseparation = 7
columns = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="LevelSelect" type="OptionButton" parent="CenterContainer2/GridContainer"]
margin_right = 84.0
margin_bottom = 35.0
text = "select level"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="StartButton" type="Button" parent="CenterContainer2/GridContainer"]
margin_left = 91.0
margin_right = 137.0
margin_bottom = 35.0
text = "START"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HighscoreButton" type="Button" parent="CenterContainer2/GridContainer"]
margin_left = 144.0
margin_right = 214.0
margin_bottom = 35.0
text = "HIGHSCORE"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DevelopedByLabel" type="Label" parent="."]
margin_left = 211.208
margin_top = 66.7105
margin_right = 384.208
margin_bottom = 87.7105
rect_scale = Vector2( 0.5, 0.5 )
custom_colors/font_color = Color( 1, 1, 1, 0.321569 )
text = "developed by twitch.tv/vojay"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="DevelopedByLabel"]
autoplay = "move"
playback_speed = 1.5
anims/RESET = SubResource( 4 )
anims/move = SubResource( 5 )

[node name="Streamling1" parent="." instance=ExtResource( 2 )]
position = Vector2( 56, 128 )

[node name="Streamling2" parent="." instance=ExtResource( 2 )]
position = Vector2( 24, 235 )

[node name="Streamling3" parent="." instance=ExtResource( 2 )]
position = Vector2( 333, 234 )

[node name="Streamling4" parent="." instance=ExtResource( 2 )]
position = Vector2( 379.669, 55.8091 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]
position = Vector2( 216, 240 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 0, 5 )
shape = SubResource( 1 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )
volume_db = -18.0

[node name="Twitch" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.92549 )
position = Vector2( 98, 137 )
scale = Vector2( 0.1075, 0.1075 )
texture = ExtResource( 6 )

[node name="EnableFullscreen" type="TextureButton" parent="."]
margin_left = 409.641
margin_top = 218.035
margin_right = 459.641
margin_bottom = 268.035
rect_scale = Vector2( 0.4, 0.4 )
texture_normal = ExtResource( 7 )
texture_pressed = ExtResource( 7 )
texture_hover = ExtResource( 7 )
texture_disabled = ExtResource( 7 )
texture_focused = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DisableFullscreen" type="TextureButton" parent="."]
visible = false
margin_left = 409.641
margin_top = 218.035
margin_right = 459.641
margin_bottom = 268.035
rect_scale = Vector2( 0.4, 0.4 )
texture_normal = ExtResource( 8 )
texture_pressed = ExtResource( 8 )
texture_hover = ExtResource( 8 )
texture_disabled = ExtResource( 8 )
texture_focused = ExtResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ToggleMusic" type="TextureButton" parent="."]
margin_left = 389.798
margin_top = 218.035
margin_right = 439.798
margin_bottom = 268.035
rect_scale = Vector2( 0.4, 0.4 )
texture_normal = ExtResource( 10 )
texture_pressed = ExtResource( 10 )
texture_hover = ExtResource( 10 )
texture_disabled = ExtResource( 10 )
texture_focused = ExtResource( 10 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Highscores" parent="." instance=ExtResource( 11 )]
visible = false

[connection signal="item_selected" from="CenterContainer2/GridContainer/LevelSelect" to="." method="_on_LevelSelect_item_selected"]
[connection signal="pressed" from="CenterContainer2/GridContainer/StartButton" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="CenterContainer2/GridContainer/HighscoreButton" to="." method="_on_HighscoreButton_pressed"]
[connection signal="pressed" from="EnableFullscreen" to="." method="_on_EnableFullscreen_pressed"]
[connection signal="pressed" from="DisableFullscreen" to="." method="_on_DisableFullscreen_pressed"]
[connection signal="pressed" from="ToggleMusic" to="." method="_on_ToggleMusic_pressed"]
